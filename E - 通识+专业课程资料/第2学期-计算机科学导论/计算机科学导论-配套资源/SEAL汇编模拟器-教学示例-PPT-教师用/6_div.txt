#<python代码：两个数的除法>
#a = 81           #a为被除数
#b = 9            #b为除数
#c = int(a / b)   #商赋值给c
#d = a%b          #余数赋值给d
#print(c,d)    

#被除数放在R0上
#除数放在R1上
#商放在R2上
#余数放在R3上
#<汇编代码：两个数的除法>
move R0,10     #a，表示被除数
move R1,4      #b，表示除数
move R2,0      #c，表示商
move R3,R0     #d，表示余数，使余数一开始存入被除数，因为后边的每次做减法都是用余数和除数进行运算
clz R4,R0      #统计被除数最高位到第一个1之间0的个数
clz R5,R1      #统计除数最高位到第一个1之间0的个数
sub R6,R5,R4
shiftl R1,R1,R6  #将除数左移(R6)位，使得除数非0的最高位与被除数非0的最高位对齐
goto L1

L0:
shiftr R1,R1,1
L1:               #L1标记的语句块是对除数和余数比较大小，来确定下一步的操作
slt R4,R3,R1       #比较余数(R3)和除数(R1)的大小，如果余数小于除数，R4置1；否则R4置0
beqz R4,L3        #寄存器R4中的值为0的时候，跳到L3语句块；否则顺序执行下一条指令
L2:
shiftl R2,R2,1    #商左移一位
goto L4
L3:              #L3所标记的语句块是余数大于除数时的操作
sub R3,R3,R1     #余数减去除数，将所得的差作为新的余数存储在寄存器R3中
shiftl R2,R2,1   #商左移一位
or R2,R2,1        #用此时左移一位后的商和1做或运算，这样1就可以被记录到商中了
L4:
sub R6,R6,1      #使用被除数与除数的位数差(R6)计数，即在做减法和移位操作中，除数一共需要右移的位数，作为移位结束的判断条件
slt R5,R6,0      #R6中的值小于0的时候表示除数移位结束，R5置1；否则还需要进行减法和移位操作，R5置0
beqz R5,L0       #R5中的值为0，跳到L0标记的语句块，否则顺序执行下一条指令
_pr R2,R3